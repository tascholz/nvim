local ui = require("todo.ui")

local M = {}

local function shrink_and_close(win, buf)
    coroutine.wrap(function()
        local config = vim.api.nvim_win_get_config(win)
        local original_width = config.width
        local original_height = config.height
        local original_row = config.row
        local original_col = config.col
        local steps = 10

        for i = 1, steps do
            local scale = (steps - i) / steps
            local new_width = math.max(1, math.floor(original_width * scale))
            local new_height = math.max(1, math.floor(original_height * scale))
            local row_offset = math.floor((original_height - new_height) / 2)
            local col_offset = math.floor((original_width - new_width) / 2)

            vim.api.nvim_win_set_config(win, {
                relative = 'editor',
                width = new_width,
                height = new_height,
                row = original_row + row_offset,
                col = original_col + col_offset,
                style = 'minimal',
                border = 'rounded',
            })

            vim.cmd("redraw")
            vim.wait(10)
        end

        if vim.api.nvim_win_is_valid(win) then
            vim.api.nvim_win_close(win, true)
        end
        if vim.api.nvim_buf_is_valid(buf) then
            vim.api.nvim_buf_delete(buf, { force = true })
        end
    end)()
end

local function render_title(buf)
    local title = {

    " ████████╗ ██████╗ █████╗   ██████╗ ",
    " ╚══██╔══╝██╔═══██╗██╔═██╗ ██╔═══██╗",
    "    ██║   ██║   ██║██║ ██║ ██║   ██║",
    "    ██║   ██║   ██║██║ ██║ ██║   ██║",
    "    ██║   ╚██████╔╝█████╔╝  ██████╔╝",
    "    ╚═╝    ╚═════╝ ╚════╝   ╚═════╝ ",
    "                                   ",
    }
    vim.api.nvim_buf_set_lines(buf, 0, -1, false, title)
    return #title
end

function render_statusline(buf, todos, start_line)
    local total = #todos
    local done = 0
    for _, todos in ipairs(todos) do
        if todos.done then
            done = done + 1
        end
    end
    local status = string.format("[ %d/%d tasks completed ]", done, total)
    vim.api.nvim_buf_set_lines(buf, start_line, start_line + 1, false, {"", status})
    vim.api.nvim_buf_add_highlight(buf, -1, "Comment", start_line, 0, -1)
end


function M.open(state)
    local buf = vim.api.nvim_create_buf(false, true)
    vim.bo[buf].buftype = 'nofile'
    vim.bo[buf].bufhidden = 'wipe'
    vim.bo[buf].swapfile = false
    vim.bo[buf].buflisted = false

    local full_width = math.floor(vim.o.columns * 0.5)
    local full_height = math.floor(vim.o.lines * 0.5)
    local center_row = math.floor((vim.o.lines - full_height) / 2)
    local center_col = math.floor((vim.o.columns - full_width) / 2)

    local win = vim.api.nvim_open_win(buf, true, {
        relative = 'editor',
        width = 1,
        height = 1,
        row = center_row + math.floor(full_height / 2),
        col = center_col + math.floor(full_width / 2),
        style = 'minimal',
        border = 'rounded',
    })

    coroutine.wrap(function()
        local steps = 10
        for i = 1, steps do
            local scale = i / steps
            local w = math.max(1, math.floor(full_width * scale))
            local h = math.max(1, math.floor(full_height * scale))
            local row = center_row + math.floor((full_height - h) / 2)
            local col = center_col + math.floor((full_width - w) / 2)

            vim.api.nvim_win_set_config(win, {
                relative = 'editor',
                width = w,
                height = h,
                row = row,
                col = col,
                style = 'minimal',
                border = 'rounded',
            })

            vim.cmd("redraw")
            vim.wait(15)
        end

        local title_offset = render_title(buf)
        ui.render_lines(buf, state.todos, title_offset)
        render_statusline(buf, state.todos, title_offset + #state.todos + 1)

        local function refresh()
            ui.render_lines(buf, state.todos, title_offset)
            render_statusline(buf, state.todos, title_offset + #state.todos + 1)
        end

        vim.keymap.set('n', '<CR>', function()
            local line = vim.api.nvim_win_get_cursor(0)[1] - 7
            if state.todos[line] then
                state.todos[line].done = not state.todos[line].done
                state.save()
                refresh()
            end
        end, { buffer = buf })

        vim.keymap.set('n', 'd', function()
            local line = vim.api.nvim_win_get_cursor(0)[1] - 7
            if state.todos[line] then
                table.remove(state.todos, line)
                state.save()
                refresh()
            end
        end, { buffer = buf })

        vim.keymap.set('n', 'a', function()
            vim.ui.input({ prompt = "Add Todo: "}, function(input)
                if input and input ~= "" then
                    table.insert(state.todos, { text = input, done = false })
                    state.save()
                    refresh()
                end
            end)
        end, { buffer = buf })

        vim.keymap.set('n', 'e', function()
            local line = vim.api.nvim_win_get_cursor(0)[1] - 7
            local current = state.todos[line]
            if current then
                vim.ui.input({ prompt = "Edit Todo: ", default = current.text }, function(new_text)
                    if new_text and new_text ~= "" then
                        current.text = new_text
                        state.save()
                        refresh()
                    end
                end)
            end
        end, { buffer = buf })

        vim.keymap.set('n', 'q', function()
            shrink_and_close(win, buf)
        end, { buffer = buf})
    end)()
end

return M
